//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace SloppyJoes
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace SloppyJoes.SloppyJoes_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_LayoutAwarePage() { return new global::SloppyJoes.Common.LayoutAwarePage(); }

        private object Activate_1_MenuMaker() { return new global::SloppyJoes.MenuMaker(); }

        private object Activate_2_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::SloppyJoes.MenuItem>(); }

        private object Activate_3_Collection() { return new global::System.Collections.ObjectModel.Collection<global::SloppyJoes.MenuItem>(); }

        private object Activate_7_MainPage() { return new global::SloppyJoes.MainPage(); }

        private void VectorAdd_2_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::SloppyJoes.MenuItem>)instance;
            var newItem = (global::SloppyJoes.MenuItem)item;
            collection.Add(newItem);
        }

        private void VectorAdd_3_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::SloppyJoes.MenuItem>)instance;
            var newItem = (global::SloppyJoes.MenuItem)item;
            collection.Add(newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Object":
                xamlType = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "String":
                xamlType = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Int32":
                xamlType = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "SloppyJoes.Common.LayoutAwarePage":
                userType = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SloppyJoes.Common.LayoutAwarePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_LayoutAwarePage;
                xamlType = userType;
                break;

            case "SloppyJoes.MenuMaker":
                userType = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SloppyJoes.MenuMaker), GetXamlTypeByName("Object"));
                userType.Activator = Activate_1_MenuMaker;
                userType.AddMemberName("Menu");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::SloppyJoes.MenuItem>),
                                                   "System.Collections.ObjectModel.ObservableCollection<SloppyJoes.MenuItem>");
                userType.AddMemberName("GeneratedDate");
                userType.AddMemberName("NumberOfItems");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<SloppyJoes.MenuItem>":
                userType = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::SloppyJoes.MenuItem>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<SloppyJoes.MenuItem>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::SloppyJoes.MenuItem>),
                                                   "System.Collections.ObjectModel.ObservableCollection<SloppyJoes.MenuItem>");
                userType.Activator = Activate_2_ObservableCollection;
                userType.CollectionAdd = VectorAdd_2_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<SloppyJoes.MenuItem>":
                userType = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::SloppyJoes.MenuItem>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::SloppyJoes.MenuItem>),
                                                   "System.Collections.ObjectModel.Collection<SloppyJoes.MenuItem>");
                userType.Activator = Activate_3_Collection;
                userType.CollectionAdd = VectorAdd_3_Collection;
                xamlType = userType;
                break;

            case "SloppyJoes.MenuItem":
                userType = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SloppyJoes.MenuItem), GetXamlTypeByName("Object"));
                userType.AddMemberName("Meat");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Condiment");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Bread");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "System.DateTime":
                userType = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.DateTime), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "SloppyJoes.MainPage":
                userType = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SloppyJoes.MainPage), GetXamlTypeByName("SloppyJoes.Common.LayoutAwarePage"));
                userType.Activator = Activate_7_MainPage;
                xamlType = userType;
                break;

            }
            return xamlType;
        }


        private object get_0_MenuMaker_Menu(object instance)
        {
            var that = (global::SloppyJoes.MenuMaker)instance;
            return that.Menu;
        }
        private object get_1_MenuItem_Meat(object instance)
        {
            var that = (global::SloppyJoes.MenuItem)instance;
            return that.Meat;
        }
        private object get_2_MenuItem_Condiment(object instance)
        {
            var that = (global::SloppyJoes.MenuItem)instance;
            return that.Condiment;
        }
        private object get_3_MenuItem_Bread(object instance)
        {
            var that = (global::SloppyJoes.MenuItem)instance;
            return that.Bread;
        }
        private object get_4_MenuMaker_GeneratedDate(object instance)
        {
            var that = (global::SloppyJoes.MenuMaker)instance;
            return that.GeneratedDate;
        }
        private object get_5_MenuMaker_NumberOfItems(object instance)
        {
            var that = (global::SloppyJoes.MenuMaker)instance;
            return that.NumberOfItems;
        }
        private void set_5_MenuMaker_NumberOfItems(object instance, object Value)
        {
            var that = (global::SloppyJoes.MenuMaker)instance;
            that.NumberOfItems = (global::System.Int32)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlMember xamlMember = null;
            global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "SloppyJoes.MenuMaker.Menu":
                userType = (global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SloppyJoes.MenuMaker");
                xamlMember = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlMember(this, "Menu", "System.Collections.ObjectModel.ObservableCollection<SloppyJoes.MenuItem>");
                xamlMember.Getter = get_0_MenuMaker_Menu;
                xamlMember.SetIsReadOnly();
                break;
            case "SloppyJoes.MenuItem.Meat":
                userType = (global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SloppyJoes.MenuItem");
                xamlMember = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlMember(this, "Meat", "String");
                xamlMember.Getter = get_1_MenuItem_Meat;
                xamlMember.SetIsReadOnly();
                break;
            case "SloppyJoes.MenuItem.Condiment":
                userType = (global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SloppyJoes.MenuItem");
                xamlMember = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlMember(this, "Condiment", "String");
                xamlMember.Getter = get_2_MenuItem_Condiment;
                xamlMember.SetIsReadOnly();
                break;
            case "SloppyJoes.MenuItem.Bread":
                userType = (global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SloppyJoes.MenuItem");
                xamlMember = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlMember(this, "Bread", "String");
                xamlMember.Getter = get_3_MenuItem_Bread;
                xamlMember.SetIsReadOnly();
                break;
            case "SloppyJoes.MenuMaker.GeneratedDate":
                userType = (global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SloppyJoes.MenuMaker");
                xamlMember = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlMember(this, "GeneratedDate", "System.DateTime");
                xamlMember.Getter = get_4_MenuMaker_GeneratedDate;
                xamlMember.SetIsReadOnly();
                break;
            case "SloppyJoes.MenuMaker.NumberOfItems":
                userType = (global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SloppyJoes.MenuMaker");
                xamlMember = new global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlMember(this, "NumberOfItems", "Int32");
                xamlMember.Getter = get_5_MenuMaker_NumberOfItems;
                xamlMember.Setter = set_5_MenuMaker_NumberOfItems;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlSystemBaseType
    {
        global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::SloppyJoes.SloppyJoes_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


